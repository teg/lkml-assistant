<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="1" time="0.672" timestamp="2025-04-28T15:09:08.216524" hostname="MacBook-Pro"><testcase classname="tests.post_deploy.test_fetch_patches" name="test_fetch_patches_lambda_exists" time="0.482"><failure message="Failed: Error checking Lambda function: An error occurred (UnrecognizedClientException) when calling the GetFunction operation: The security token included in the request is invalid.">verifier = &lt;tests.post_deploy.post_deploy_verifier.DeploymentVerifier object at 0x109f7c550&gt;

    def test_fetch_patches_lambda_exists(verifier):
        """Test that the fetch-patches Lambda function exists."""
        # Get Lambda function details
        try:
            function_name = f"LkmlAssistant-FetchPatches-{ENVIRONMENT}"
&gt;           response = verifier.lambda_client.get_function(FunctionName=function_name)

tests/post_deploy/test_fetch_patches.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.11/site-packages/botocore/client.py:565: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.client.Lambda object at 0x10be49290&gt;
operation_name = 'GetFunction'
api_params = {'FunctionName': 'LkmlAssistant-FetchPatches-dev'}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(
            'API_CALL',
            {
                'service': service_name,
                'operation': operation_name,
                'params': api_params,
            },
        )
        if operation_model.deprecated:
            logger.debug(
                'Warning: %s.%s() is deprecated', service_name, operation_name
            )
        request_context = {
            'client_region': self.meta.region_name,
            'client_config': self.meta.config,
            'has_streaming_input': operation_model.has_streaming_input,
            'auth_type': operation_model.auth_type,
        }
        api_params = self._emit_api_params(
            api_params=api_params,
            operation_model=operation_model,
            context=request_context,
        )
        (
            endpoint_url,
            additional_headers,
            properties,
        ) = self._resolve_endpoint_ruleset(
            operation_model, api_params, request_context
        )
        if properties:
            # Pass arbitrary endpoint info with the Request
            # for use during construction.
            request_context['endpoint_properties'] = properties
        request_dict = self._convert_to_request_dict(
            api_params=api_params,
            operation_model=operation_model,
            endpoint_url=endpoint_url,
            context=request_context,
            headers=additional_headers,
        )
        resolve_checksum_context(request_dict, operation_model, api_params)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            f'before-call.{service_id}.{operation_name}',
            model=operation_model,
            params=request_dict,
            request_signer=self._request_signer,
            context=request_context,
        )
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            maybe_compress_request(
                self.meta.config, request_dict, operation_model
            )
            apply_request_checksum(request_dict)
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context
            )
    
        self.meta.events.emit(
            f'after-call.{service_id}.{operation_name}',
            http_response=http,
            parsed=parsed_response,
            model=operation_model,
            context=request_context,
        )
    
        if http.status_code &gt;= 300:
            error_info = parsed_response.get("Error", {})
            error_code = error_info.get("QueryErrorCode") or error_info.get(
                "Code"
            )
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (UnrecognizedClientException) when calling the GetFunction operation: The security token included in the request is invalid.

venv/lib/python3.11/site-packages/botocore/client.py:1017: ClientError

During handling of the above exception, another exception occurred:

verifier = &lt;tests.post_deploy.post_deploy_verifier.DeploymentVerifier object at 0x109f7c550&gt;

    def test_fetch_patches_lambda_exists(verifier):
        """Test that the fetch-patches Lambda function exists."""
        # Get Lambda function details
        try:
            function_name = f"LkmlAssistant-FetchPatches-{ENVIRONMENT}"
            response = verifier.lambda_client.get_function(FunctionName=function_name)
    
            # Check that the function exists and is active
            assert response["Configuration"]["State"] == "Active"
            assert response["Configuration"]["Runtime"].startswith("python")
    
            print(f"âœ… Lambda function {function_name} exists and is active")
        except Exception as e:
            # Check if the error is because the function doesn't exist
            if "Function not found" in str(e):
                pytest.skip(f"Lambda function {function_name} does not exist yet. Skipping test.")
            else:
&gt;               pytest.fail(f"Error checking Lambda function: {str(e)}")
E               Failed: Error checking Lambda function: An error occurred (UnrecognizedClientException) when calling the GetFunction operation: The security token included in the request is invalid.

tests/post_deploy/test_fetch_patches.py:41: Failed</failure></testcase></testsuite></testsuites>