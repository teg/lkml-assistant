<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="1" failures="0" skipped="0" tests="1" time="0.657" timestamp="2025-04-28T15:12:08.841119" hostname="MacBook-Pro"><testcase classname="tests.post_deploy.test_fetch_patches" name="test_fetch_patches_lambda_exists" time="0.516"><error message="failed on setup with &quot;NameError: name 'UNSIGNED' is not defined&quot;">self = &lt;tests.post_deploy.post_deploy_verifier.DeploymentVerifier object at 0x102f68850&gt;
environment = 'dev', region = 'us-east-1', profile = None

    def __init__(self, environment: str = "dev", region: str = "us-east-1", profile: Optional[str] = None):
        """
        Initialize the deployment verifier.
    
        Args:
            environment: The deployment environment (dev, staging, prod)
            region: AWS region
            profile: AWS profile to use (optional)
        """
        self.environment = environment
        self.region = region
        self.profile = profile
        self.credentials_valid = False
    
        try:
            # Initialize boto3 session
            if profile:
                self.session = boto3.Session(profile_name=profile, region_name=region)
            else:
                self.session = boto3.Session(region_name=region)
    
            # Test credentials
            sts_client = self.session.client('sts')
&gt;           sts_client.get_caller_identity()

tests/post_deploy/post_deploy_verifier.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.11/site-packages/botocore/client.py:565: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.client.STS object at 0x100e81c10&gt;
operation_name = 'GetCallerIdentity', api_params = {}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(
            'API_CALL',
            {
                'service': service_name,
                'operation': operation_name,
                'params': api_params,
            },
        )
        if operation_model.deprecated:
            logger.debug(
                'Warning: %s.%s() is deprecated', service_name, operation_name
            )
        request_context = {
            'client_region': self.meta.region_name,
            'client_config': self.meta.config,
            'has_streaming_input': operation_model.has_streaming_input,
            'auth_type': operation_model.auth_type,
        }
        api_params = self._emit_api_params(
            api_params=api_params,
            operation_model=operation_model,
            context=request_context,
        )
        (
            endpoint_url,
            additional_headers,
            properties,
        ) = self._resolve_endpoint_ruleset(
            operation_model, api_params, request_context
        )
        if properties:
            # Pass arbitrary endpoint info with the Request
            # for use during construction.
            request_context['endpoint_properties'] = properties
        request_dict = self._convert_to_request_dict(
            api_params=api_params,
            operation_model=operation_model,
            endpoint_url=endpoint_url,
            context=request_context,
            headers=additional_headers,
        )
        resolve_checksum_context(request_dict, operation_model, api_params)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            f'before-call.{service_id}.{operation_name}',
            model=operation_model,
            params=request_dict,
            request_signer=self._request_signer,
            context=request_context,
        )
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            maybe_compress_request(
                self.meta.config, request_dict, operation_model
            )
            apply_request_checksum(request_dict)
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context
            )
    
        self.meta.events.emit(
            f'after-call.{service_id}.{operation_name}',
            http_response=http,
            parsed=parsed_response,
            model=operation_model,
            context=request_context,
        )
    
        if http.status_code &gt;= 300:
            error_info = parsed_response.get("Error", {})
            error_code = error_info.get("QueryErrorCode") or error_info.get(
                "Code"
            )
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (InvalidClientTokenId) when calling the GetCallerIdentity operation: The security token included in the request is invalid.

venv/lib/python3.11/site-packages/botocore/client.py:1017: ClientError

During handling of the above exception, another exception occurred:

    @pytest.fixture
    def verifier():
        """Create a deployment verifier for tests."""
&gt;       return DeploymentVerifier(environment=ENVIRONMENT)

tests/post_deploy/test_fetch_patches.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.post_deploy.post_deploy_verifier.DeploymentVerifier object at 0x102f68850&gt;
environment = 'dev', region = 'us-east-1', profile = None

    def __init__(self, environment: str = "dev", region: str = "us-east-1", profile: Optional[str] = None):
        """
        Initialize the deployment verifier.
    
        Args:
            environment: The deployment environment (dev, staging, prod)
            region: AWS region
            profile: AWS profile to use (optional)
        """
        self.environment = environment
        self.region = region
        self.profile = profile
        self.credentials_valid = False
    
        try:
            # Initialize boto3 session
            if profile:
                self.session = boto3.Session(profile_name=profile, region_name=region)
            else:
                self.session = boto3.Session(region_name=region)
    
            # Test credentials
            sts_client = self.session.client('sts')
            sts_client.get_caller_identity()
    
            # Credentials are valid, initialize clients
            self.lambda_client = self.session.client('lambda')
            self.dynamodb = self.session.resource('dynamodb')
            self.logs_client = self.session.client('logs')
    
            # Resource naming prefix based on environment
            self.resource_prefix = f"LkmlAssistant-{environment}"
    
            self.credentials_valid = True
            logger.info(f"Initialized deployment verifier for {environment} environment in {region}")
        except Exception as e:
            logger.warning(f"Failed to initialize AWS clients: {str(e)}")
            logger.warning("Most tests will be skipped. To run post-deployment tests, configure valid AWS credentials.")
            # Create dummy clients for code to work, but operations will be skipped
            self.session = boto3.Session(region_name=region)
&gt;           self.lambda_client = self.session.client('lambda', config=boto3.session.Config(signature_version=UNSIGNED))
E           NameError: name 'UNSIGNED' is not defined

tests/post_deploy/post_deploy_verifier.py:62: NameError</error></testcase></testsuite></testsuites>